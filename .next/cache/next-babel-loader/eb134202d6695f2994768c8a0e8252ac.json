{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\milto\\\\Desktop\\\\podcast\\\\pages\\\\channel.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audios = _this$props.audios,\n          series = _this$props.series;\n      console.log(channel);\n      console.log(audios);\n      console.log(series);\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, __jsx(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, \"Podcast\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }\n      }, channel.title), __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, \"Series\"), series.map(function (serie) {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 28\n          }\n        }, \" \", serie.title, \" \");\n      }), __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, \"ultimos podcast\"), audios.map(function (audio) {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 28\n          }\n        }, \" \", audio.title, \" \");\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var query, idChannel, _yield$Promise$all, _yield$Promise$all2, requestChannel, requestAudio, requestSeries, dataChannel, channel, dataAudio, audios, dataSeries, series;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query;\n                idChannel = query.id;\n                _context.next = 4;\n                return Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]);\n\n              case 4:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n                requestChannel = _yield$Promise$all2[0];\n                requestAudio = _yield$Promise$all2[1];\n                requestSeries = _yield$Promise$all2[2];\n                _context.next = 11;\n                return requestChannel.json();\n\n              case 11:\n                dataChannel = _context.sent;\n                channel = dataChannel.body.channel;\n                _context.next = 15;\n                return requestAudio.json();\n\n              case 15:\n                dataAudio = _context.sent;\n                audios = dataAudio.body.audio_clips;\n                _context.next = 19;\n                return requestSeries.json();\n\n              case 19:\n                dataSeries = _context.sent;\n                series = dataSeries.body.channel;\n                return _context.abrupt(\"return\", {\n                  channel: channel,\n                  audios: audios,\n                  series: series\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:/Users/milto/Desktop/podcast/pages/channel.js"],"names":["React","props","channel","audios","series","console","log","title","map","serie","audio","query","idChannel","id","Promise","all","fetch","requestChannel","requestAudio","requestSeries","json","dataChannel","body","dataAudio","audio_clips","dataSeries","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;;;;;;;6BAyBa;AAAA;;AAAA,wBAC+B,KAAKC,KADpC;AAAA,UACGC,OADH,eACGA,OADH;AAAA,UACYC,MADZ,eACYA,MADZ;AAAA,UACoBC,MADpB,eACoBA,MADpB;AAELC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,OAAO,CAACK,KAAb,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,EAIKH,MAAM,CAACI,GAAP,CAAW,UAACC,KAAD,EAAW;AACnB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAOA,KAAK,CAACF,KAAb,MAAP;AACH,OAFA,CAJL,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BARJ,EASKJ,MAAM,CAACK,GAAP,CAAW,UAACE,KAAD,EAAW;AACnB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAOA,KAAK,CAACH,KAAb,MAAP;AACH,OAFA,CATL,CADJ;AAgBH;;;;;;;;;;;AA3C8BI,gBAAAA,K,QAAAA,K;AACrBC,gBAAAA,S,GAAYD,KAAK,CAACE,E;;uBAEkCC,OAAO,CAACC,GAAR,CAAY,CAClEC,KAAK,8CAAuCJ,SAAvC,EAD6D,EAElEI,KAAK,8CAAuCJ,SAAvC,qBAF6D,EAGlEI,KAAK,8CAAuCJ,SAAvC,kBAH6D,CAAZ,C;;;;;AAArDK,gBAAAA,c;AAAgBC,gBAAAA,Y;AAAcC,gBAAAA,a;;uBAMTF,cAAc,CAACG,IAAf,E;;;AAApBC,gBAAAA,W;AACAnB,gBAAAA,O,GAAUmB,WAAW,CAACC,IAAZ,CAAiBpB,O;;uBAETgB,YAAY,CAACE,IAAb,E;;;AAAlBG,gBAAAA,S;AACApB,gBAAAA,M,GAASoB,SAAS,CAACD,IAAV,CAAeE,W;;uBAELL,aAAa,CAACC,IAAd,E;;;AAAnBK,gBAAAA,U;AACArB,gBAAAA,M,GAASqB,UAAU,CAACH,IAAX,CAAgBpB,O;iDAExB;AAAEA,kBAAAA,OAAO,EAAPA,OAAF;AAAWC,kBAAAA,MAAM,EAANA,MAAX;AAAmBC,kBAAAA,MAAM,EAANA;AAAnB,iB;;;;;;;;;;;;;;;;;;;EApBcJ,KAAK,CAAC0B,S","sourcesContent":["import React from 'react'\r\n\r\nexport default class extends React.Component {\r\n\r\n    static async getInitialProps({ query }) {\r\n        const idChannel = query.id\r\n\r\n        let [requestChannel, requestAudio, requestSeries] = await Promise.all([\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\r\n        ])\r\n\r\n        const dataChannel = await requestChannel.json()\r\n        const channel = dataChannel.body.channel\r\n\r\n        const dataAudio = await requestAudio.json()\r\n        const audios = dataAudio.body.audio_clips\r\n\r\n        const dataSeries = await requestSeries.json()\r\n        const series = dataSeries.body.channel\r\n\r\n        return { channel, audios, series }\r\n    }\r\n\r\n    render() {\r\n        const { channel, audios, series } = this.props\r\n        console.log(channel)\r\n        console.log(audios)\r\n        console.log(series)\r\n\r\n        return (\r\n            <div>\r\n                <header>Podcast</header>\r\n                <h1>{channel.title}</h1>\r\n                <h2>Series</h2>\r\n                {series.map((serie) => {\r\n                    return <div> {serie.title} </div>\r\n                })}\r\n\r\n                <h2>ultimos podcast</h2>\r\n                {audios.map((audio) => {\r\n                    return <div> {audio.title} </div>\r\n                })}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}