{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\milto\\\\Desktop\\\\podcast\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from './Error';\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channels = _this$props.channels,\n          statusCode = _this$props.statusCode;\n      console.log(statusCode);\n\n      if (statusCode == 503) {\n        return __jsx(Error, {\n          error: statusCode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return __jsx(Layout, {\n        title: \"Podcast\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, __jsx(ChannelGrid, {\n        channels: channels,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var res, request, response, channels;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                res = _ref.res;\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch('https://api.audioboom.cosdm/channels/recommended');\n\n              case 4:\n                request = _context.sent;\n                _context.next = 7;\n                return request.json();\n\n              case 7:\n                response = _context.sent;\n                channels = response.body;\n                return _context.abrupt(\"return\", {\n                  channels: channels\n                });\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](1);\n                res.statusCode = 503;\n                return _context.abrupt(\"return\", {\n                  channels: null,\n                  statusCode: 503\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 12]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:/Users/milto/Desktop/podcast/pages/index.js"],"names":["Layout","ChannelGrid","Error","props","channels","statusCode","console","log","res","fetch","request","json","response","body","React","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,kBAAP;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;;;;;;;;;;;;;6BAgBa;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACEC,QADF,eACEA,QADF;AAAA,UACYC,UADZ,eACYA,UADZ;AAELC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AAEA,UAAGA,UAAU,IAAI,GAAjB,EAAqB;AACjB,eAAO,MAAC,KAAD;AAAO,UAAA,KAAK,EAAEA,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,aACI,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,WAAD;AAAa,QAAA,QAAQ,EAAED,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH;;;;;;;;;;AAzB8BI,gBAAAA,G,QAAAA,G;;;uBAEDC,KAAK,CAAC,kDAAD,C;;;AAArBC,gBAAAA,O;;uBACiBA,OAAO,CAACC,IAAR,E;;;AAAjBC,gBAAAA,Q;AACAR,gBAAAA,Q,GAAWQ,QAAQ,CAACC,I;iDACnB;AAAET,kBAAAA,QAAQ,EAARA;AAAF,iB;;;;;AAEPI,gBAAAA,GAAG,CAACH,UAAJ,GAAiB,GAAjB;iDACO;AAACD,kBAAAA,QAAQ,EAAE,IAAX;AAAiBC,kBAAAA,UAAU,EAAE;AAA7B,iB;;;;;;;;;;;;;;;;;;;EAVUS,KAAK,CAACC,S","sourcesContent":["import 'isomorphic-fetch'\r\nimport Layout from '../components/Layout'\r\nimport ChannelGrid from '../components/ChannelGrid'\r\nimport Error from './Error'\r\n\r\nexport default class extends React.Component {\r\n\r\n    static async getInitialProps({ res }){\r\n        try{\r\n            const request = await fetch('https://api.audioboom.cosdm/channels/recommended')\r\n            const response = await request.json() \r\n            const channels = response.body\r\n            return { channels }\r\n        }catch(error){\r\n            res.statusCode = 503\r\n            return {channels: null, statusCode: 503}\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {channels, statusCode} = this.props\r\n        console.log(statusCode)\r\n\r\n        if(statusCode == 503){\r\n            return <Error error={statusCode} />\r\n        }\r\n\r\n        return (\r\n            <Layout title=\"Podcast\">\r\n                <ChannelGrid channels={channels} />\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}